// Mocks generated by Mockito 5.4.0 from annotations
// in rentworks/test/features/realty/domain/usecases/realty_usescase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rentworks/features/realty/domain/entities/realty.dart' as _i2;
import 'package:rentworks/features/realty/domain/repositories/realty_repository.dart'
    as _i3;
import 'package:rentworks/features/realty/domain/usecases/params/realty_param.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRealty_0 extends _i1.SmartFake implements _i2.Realty {
  _FakeRealty_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RealtyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRealtyRepository extends _i1.Mock implements _i3.RealtyRepository {
  MockRealtyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> createRealty(_i5.RealtyParam? param) => (super.noSuchMethod(
        Invocation.method(
          #createRealty,
          [param],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.Realty> getRealtyById(int? realtyId) => (super.noSuchMethod(
        Invocation.method(
          #getRealtyById,
          [realtyId],
        ),
        returnValue: _i4.Future<_i2.Realty>.value(_FakeRealty_0(
          this,
          Invocation.method(
            #getRealtyById,
            [realtyId],
          ),
        )),
      ) as _i4.Future<_i2.Realty>);
  @override
  _i4.Future<bool> updateRealty(_i2.Realty? updatedRealty) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRealty,
          [updatedRealty],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> deleteRealty(String? realtyId) => (super.noSuchMethod(
        Invocation.method(
          #deleteRealty,
          [realtyId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
