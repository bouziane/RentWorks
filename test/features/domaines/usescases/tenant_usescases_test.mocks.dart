// Mocks generated by Mockito 5.4.0 from annotations
// in rentworks/test/features/domaines/usescases/tenant_usescases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rentworks/features/tenant/domain/entities/tenant.dart' as _i2;
import 'package:rentworks/features/tenant/domain/repositories/tenant_repository.dart'
    as _i3;
import 'package:rentworks/features/tenant/domain/usecases/params/tenant_param.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTenant_0 extends _i1.SmartFake implements _i2.Tenant {
  _FakeTenant_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TenantRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTenantRepository extends _i1.Mock implements _i3.TenantRepository {
  MockTenantRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> createTenant(_i5.TenantParam? tenantParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTenant,
          [tenantParam],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> deleteTenant(String? tenantId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTenant,
          [tenantId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> updateTenant(_i2.Tenant? updatedTenant) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTenant,
          [updatedTenant],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.Tenant> getTenantById(int? tenantId) => (super.noSuchMethod(
        Invocation.method(
          #getTenantById,
          [tenantId],
        ),
        returnValue: _i4.Future<_i2.Tenant>.value(_FakeTenant_0(
          this,
          Invocation.method(
            #getTenantById,
            [tenantId],
          ),
        )),
      ) as _i4.Future<_i2.Tenant>);
}
